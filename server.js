
// Very simple server to serve static files on Heroku

delete process.env.BROWSER;

import path from 'path';
import fs from 'fs';

import express from 'express';
import compression from 'compression';
import Handlebars from 'handlebars';
import bloql from 'bloql/server/middleware/express';

import webpack from 'webpack';
import webpackMiddleware from 'webpack-dev-middleware';
import webpackHotMiddleware from 'webpack-hot-middleware';

import config from './webpack/dev.config';

const app = express();

let port = process.env.PORT || 3000;

bloql(app, {
  pretty: true,
  postsPath: path.join(__dirname, 'posts'),
  database: require('bloql-markdown-file-database')
});

app.use(compression());

app.use(express.static('public', {
  lastModified: true,
  maxAge: 31536000000
}));

var assetsPaths = {
  js: 'index.js',
  css: 'style.css'
};

if (process.env.NODE_ENV === 'development') {

  const compiler = webpack(config);

  app.use(webpackMiddleware(compiler, {
    publicPath: config.output.publicPath,
    contentBase: 'public',
    stats: {
      colors: true,
      hash: false,
      timings: true,
      chunks: false,
      chunkModules: false,
      modules: false
    }
  }));

  app.use(webpackHotMiddleware(compiler));

} else {
  // Get assets path from file generated by Webpack
  var webpackAssets = require('./public/assets.json');
  assetsPaths = {
    js: webpackAssets.main.js,
    css: webpackAssets.main.css
  };
}

// import React from 'react';
// import ReactDOMServer from 'react-dom/server';
// import { RoutingContext, match } from 'react-router';
// import createLocation from 'history/lib/createLocation';
// import routes from './src/routes';

app.use((req, res) => {

  // Generate Handlebars templates
  const indexTpl = Handlebars.compile(fs.readFileSync(path.join(__dirname, 'src', 'index.hbs'), 'utf8'));

//   const location = createLocation(req.url);

//   match({ routes, location }, (err, redirectLocation, renderProps) => {

//     const componentHTML = ReactDOMServer.renderToString(<RoutingContext {...renderProps} />);

//     const html = indexTpl({
//       body: componentHTML
//     });

//     res.end(html);

//   });

  // Respond to all request by the index
  res.end(indexTpl({
    jsPath: assetsPaths.js,
    cssPath: assetsPaths.css
  }));

});

app.listen(port, () => {
  console.log('Server started and listening on port ' + port);
});
